#!/usr/bin/env python
# coding: utf-8
# TST checkout
# (C) 2016 Dalton Serey / UFCG

from __future__ import print_function
from __future__ import unicode_literals

import json
import os
import sys
import codecs
import md5

import tstlib as tst
from tstlib import data2json
from tstlib import _assert

TSTJSON = './.tst/tst.json'
KINDS = ['assignment', 'activity', 'event', 'group']

def help():
    print("usage: tst-checkout [name]")
    sys.exit(1)


def mkdirs(dirname):
    try: 
        os.makedirs(dirname)
        return True
    except OSError:
        if not os.path.isdir(dirname):
            raise


def checkout_activity(data, dirname, overwrite=False):

    # read local tst.json
    tstjson = tst.read_tstjson()
    if tstjson:
        update_activity(data, dirname, overwrite=overwrite)
        return

    # get data from server
    server = tst.Server()
    url = '/api/activity/%s' % data['iid']
    activity = server.get(url, exit_on_fail=True).json()


    # change to target directory
    if not os.path.exists(dirname):
        mkdirs(dirname)
    os.chdir(dirname)

    # save activity
    tst.save_activity(activity, is_checkout=True)
    tst.cprint(tst.LCYAN, "Activity successfully checked out")
    tst.cprint(tst.RESET, "Target directory: %s%s" % (tst.LGREEN, dirname))
    

def update_activity(data, dirname, overwrite=True):

    tstjson = tst.read_tstjson(quit_on_fail=True)
    name = tstjson['name']

    # calculate delta bewteen directory and checked out version
    activity, unknown = tst.read_activity(tstjson)
    changes = tst.activity_changes(activity, tstjson)
    if not overwrite and changes and set(changes.keys()) - set(['unknown']):
        print("This activity has local changes. Use:")
        print("  `tst status` to list local changes")
        print("  `tst checkout --overwrite` to discarding changes")
        sys.exit()
        
    directory = '.'

    # request activity data
    server = tst.Server()
    url = '/api/activity/%s' % data['iid']
    activity = server.get(url, exit_on_fail=True).json()

    # inspect response
    if config['user'] != activity['owner'] and config['user'] not in activity['collaborators']:
        print("This activity is not shared with you.")
        print("Operation aborted.")
        sys.exit(1)

    # change to activity directory
    if not os.path.exists(directory):
        mkdirs(directory)
    os.chdir(directory)

    # save using proper save function
    tst.save_activity(activity, is_checkout=True)
    print("Activity successfully checked out")
    print("Target directory: %s" % directory)


def save_assignment(assignment, is_checkout=True):
    # save tst.json
    tstjson = {
        'kind': 'assignment',
        'files': assignment['files'],
        'iid': assignment['iid'],
        'activity_revision': assignment['activity_revision'],
        'name': assignment.get('name')
    }
    tst.save_tstjson(tstjson)
    
    # read local tests, if any
    filename = 'tst.json'
    local_tests = []
    if os.path.exists(filename):
        with codecs.open(filename, mode='r', encoding='utf-8') as f:
            local_tests = json.load(f)['tests']

    # add activity tests to local tests
    tests = assignment['tests']
    for test in local_tests:
        if test in tests:
            continue
        tests.append(test)

    # save visible tst.json
    with codecs.open(filename, mode='w', encoding='utf-8') as f:
        f.write(data2json({'tests': tests}))
    
    # save files (server includes last answer as a file)
    for filename in assignment['files']:
        contents = assignment['files'][filename]['data']
        with codecs.open(filename, mode='w', encoding='utf-8') as f:
            f.write(contents)
    


def checkout_assignment(data, dirname, overwrite=False):

    # request activity data
    server = tst.Server()
    url = '/api/assignment/%s?checkout=true' % data['iid']
    assignment = server.get(url, exit_on_fail=True).json()

    # change to target directory
    if not os.path.exists(dirname):
        mkdirs(dirname)
    os.chdir(dirname)

    save_assignment(assignment)
    tst.cprint(tst.LCYAN, "Assignment successfully checked out")
    print("Target directory: %s" % dirname)


def get_checkout_function(kind):
    return globals()["checkout_" + kind]


def main(args):

    # parse command line
    command = tst.pop_argument(args)
    overwrite = tst.pop_flag(args, 'overwrite', short='o')
    index = tst.pop_option(args, 'index', short='i', vtype=int)
    name = tst.pop_argument(args)
    dirname = tst.pop_argument(args)
    _assert(args == [], "tst: fatal: too many arguments")

    # parse object name
    if ':' in name:
        user, name = name.split(':', 1)
    else:
        user = None

    dirname = dirname or name

    # check whether this is a tst directory
    tstjson = tst.read_tstjson()
    if tstjson and name and name != tstjson['name']:
        tst.cprint(tst.LRED, "Cannot checkout an object inside another")
        print("---")
        print("Use `tst status` to display info about this tst directory")
        print("Use `tst checkout` to update the object in this directory")
        print("Or change directory and repeat the command")
        sys.exit(1)

    elif not tstjson and not name:
        tst.cprint(tst.LRED, "Not a tst directory and no object specified")
        print("---")
        print("Use `tst checkout <name>` to checkout object <name> in its directory")
        print("Use `tst checkout <name> <dir>` to checkout object <name> in <dir>")
        print("Use `tst ls` to list all objects available")
        print("You can use either a <name> or an integer identifier")
        sys.exit(1)
        
    elif tstjson and not name:
        name = tstjson.get('name') or tstjson.get('iid')
        dirname = "."

    # identify kind of object requested
    server = tst.Server()
    if user:
        url = "/api/object/%s?user=%s" % (name, user)
    else:
        url = "/api/object/%s" % name
    objects = server.get(url, exit_on_fail=True).json()
    _assert(type(objects) is list, "tst: fatal: invalid data received from server")

    # dispatch to proper checkout function
    if len(objects) == 1 or len(objects) > 1 and 0 <= index < len(objects):
        obj = objects[index or 0]
        checkout = get_checkout_function(obj['kind'])
        checkout(obj, dirname, overwrite=overwrite)
        sys.exit(0)

    # set failure message
    if objects == []:
        if user:
            message = "No object `%s` for user `%s`" % (name, user)
        else:
            message = "No object `%s`" % name
    elif len(objects) > 1 and index is None:
        message = "Multiple objects named `%s`" % name
    elif len(objects) > 1 and not (0 <= index < len(objects)):
        message = "Invalid index: %s" % str(index)
    tst.cprint(tst.LRED, message)

    # print possible subsequent commands
    print("---")
    if objects == []:
        print("Use `tst checkout <user>:<name>` to accept and checkout shared object")
        print("Use `tst ls` to list all available objects")
    else:
        for i in xrange(len(objects)):
            obj = objects[i]
            print("Use `tst checkout %s --index %d` to checkout" % (name, i))
            if obj['kind'] == 'activity':
                print("   activity `%s` of %s" % (obj['name'], obj['owner']))
            elif obj['kind'] == 'assignment':
                print("   assignment `%s`" % obj['iid'])
            print()


# main
if __name__ == "__main__":

    if sys.argv[-1] == '--one-line-help':
        print("save changes to the server")
        sys.exit()

    config = tst.Config()
    if 'user' not in config:
        tst.cprint(tst.LRED, "No user logged in.")
        print("---")
        print("Use `tst login <email>` to log in to the server")
        sys.exit(1)

    main(sys.argv)
