#!/usr/bin/env python
# coding: utf-8
# TST checkout
# (C) 2016 Dalton Serey / UFCG

from __future__ import print_function
from __future__ import unicode_literals

import json
import os
import sys
import codecs
import md5
import glob

import tstlib as tst
from tstlib import data2json
from tstlib import _assert

TSTJSON = './.tst/tst.json'
KINDS = ['assignment', 'activity', 'event', 'group']

def help():
    print("usage: tst-checkout [name]")
    sys.exit(1)


def mkdirs(dirname):
    try: 
        os.makedirs(dirname)
        return True
    except OSError:
        if not os.path.isdir(dirname):
            raise


def checkout_activity(data, dirname, overwrite=False):

    # read local tst.json
    tstjson = tst.read_tstjson()
    if tstjson:
        update_activity(data, dirname, overwrite=overwrite)
        return

    # get data from server
    server = tst.Server()
    url = '/api/activity/%s' % data['iid']
    activity = server.get(url, exit_on_fail=True).json()


    # change to target directory
    if not os.path.exists(dirname):
        mkdirs(dirname)
    os.chdir(dirname)

    # save activity
    tst.save_activity(activity, is_checkout=True)
    tst.cprint(tst.LCYAN, "Activity successfully checked out")
    tst.cprint(tst.RESET, "Target directory: %s%s" % (tst.LGREEN, dirname))
    

def update_activity(data, dirname, overwrite=True):

    tstjson = tst.read_tstjson(quit_on_fail=True)
    name = tstjson['name']

    # calculate delta bewteen directory and checked out version
    activity, unknown = tst.read_activity(tstjson)
    changes = tst.activity_changes(activity, tstjson)
    if not overwrite and changes and set(changes.keys()) - set(['unknown']):
        print("This activity has local changes. Use:")
        print("  `tst status` to list local changes")
        print("  `tst checkout --overwrite` to discarding changes")
        sys.exit()
        
    directory = '.'

    # request activity data
    server = tst.Server()
    url = '/api/activity/%s' % data['iid']
    activity = server.get(url, exit_on_fail=True).json()

    # inspect response
    if config['user'] != activity['owner'] and config['user'] not in activity['collaborators']:
        print("This activity is not shared with you.")
        print("Operation aborted.")
        sys.exit(1)

    # change to activity directory
    if not os.path.exists(directory):
        mkdirs(directory)
    os.chdir(directory)

    # save using proper save function
    tst.save_activity(activity, is_checkout=True)
    print("Activity successfully checked out")
    print("Target directory: %s" % directory)


def save_assignment(assignment, is_checkout=True):
    # save tst.json
    tstjson = {
        'kind': 'assignment',
        'files': assignment['files'],
        'iid': assignment['iid'],
        'activity_revision': assignment['activity_revision'],
        'name': assignment.get('name')
    }
    tst.save_tstjson(tstjson)
    
    # read local tests, if any
    filename = 'tst.json'
    local_tests = []
    if os.path.exists(filename):
        with codecs.open(filename, mode='r', encoding='utf-8') as f:
            local_tests = json.load(f)['tests']

    # add activity tests to local tests
    tests = assignment['tests']
    for test in local_tests:
        if test in tests:
            continue
        tests.append(test)

    # save visible tst.json
    with codecs.open(filename, mode='w', encoding='utf-8') as f:
        f.write(data2json({'tests': tests}))
    
    # save files (server includes last answer as a file)
    for filename in assignment['files']:
        contents = assignment['files'][filename]['data']
        with codecs.open(filename, mode='w', encoding='utf-8') as f:
            f.write(contents)
    


def checkout_assignment(data, dirname, overwrite=False):

    # request activity data
    server = tst.Server()
    url = '/api/assignment/%s?checkout=true' % data['iid']
    assignment = server.get(url, exit_on_fail=True).json()

    # change to target directory
    if not os.path.exists(dirname):
        mkdirs(dirname)
    os.chdir(dirname)

    save_assignment(assignment)
    tst.cprint(tst.LCYAN, "Assignment successfully checked out")
    print("Target directory: %s" % dirname)


def get_checkout_function(kind):
    return globals()["checkout_" + kind]


def save_activities_tests(data):
    server = tst.Server()
    for a in data['released_activities']:
        url = '/api/activity/%s' % a
        dirnames = glob.glob('*%s-v*' % a)
        print(dirnames, a)
        _assert(len(dirnames) > 0, "tst: fatal: no activity directory")
        if len(dirnames) > 1:
            print(dirnames)
            tst.cprint(tst.LGREEN, "More than one activity directory")
        for i in range(len(dirnames)):
            dirname = dirnames[i]
            filename = "%s/tst.json" % dirname
            with codecs.open(filename, mode='w', encoding='utf-8') as f:
                f.write('{ "name": "%s", "kind": "activity"}' % a)


def save_activity_files(data, dirname):
    with codecs.open('tst.json', mode='w', encoding='utf-8') as f:
        f.write(data2json({'tests': data['tests']}))

    files = data['files'] or []
    for fn in files:
        category = files[fn].get('category', 'private')
        with codecs.open(fn, mode='w', encoding='utf-8') as f:
            f.write(files[fn]['data'])
            f.write(("# %s file" % category).encode('utf-8'))


def save_report(data):
    filename = "results.json"
    participants = [a['user'] for a in data['assignments']]
    report = {name:{} for name in participants}
    for a in data['assignments']:
        if a.has_key('last_answer'):
            if a['last_answer'].has_key('__summary'):
                summary = a['last_answer']['__summary']
                if summary == len(summary) * '.':
                    if 'null' in a:
                        result = 'impugned'
                    else:
                        result = 'success'
                else:
                    if 'promoted' in a:
                        result = 'accepted'
                    else:
                        result = 'fail'
                key = "%s.%s" % (a['unit'], a['name'])
                report[a['user']][key] = result

    with codecs.open(filename, mode='w', encoding='utf-8') as f:
        f.write(data2json(report))


def save_activities(activities):
    for name in activities:
        dirs = [d for d in glob.glob("*%s-*" % name) if os.path.isdir(d)]
        home = os.getcwd()
        for d in dirs:
            os.chdir(d)
            save_activity_files(activities[name], d)
            os.chdir(home)
        

def save_assignments(assignments):

    # save assignments
    for a in assignments:
        if a.get('last_answer') is None:
            continue

        username = a['user'].split('@')[0].replace(".", "_")
        extension = a['last_answer']['__filename'].split('.')[-1]
        unit = a['unit']
        activity = a['name']
        activity_revision = a['last_answer']['__activity_revision']
        major = activity_revision.split('.')[0]
        dirname = "%s.%s-v%s" % (unit, activity, major)
        mkdirs(dirname)
        filename = "%s/%s.%s" % (dirname, username, extension)
        ASSIGNMENT_URL = "http://tst-online.appspot.com/#/as"
        ACTIVITY_URL = "http://tst-online.appspot.com/#/ac"
        with codecs.open(filename, mode='w', encoding='utf-8') as f:
            # save user created content
            data = a['last_answer']['__code']
            f.write(data)

            # add tst data
            f.write("\n####\n")
            f.write("# activity name: %s\n" % a['name'])
            if 'null' in a:
                f.write("# current state: %s (impugned: %s)\n" % (a['state'], a[ 'null']))
            elif 'promoted' in a:
                f.write("# current state: %s (accepted: %s)\n" % (a['state'], a[ 'promoted']))
            else:
                f.write("# current state: %s\n" % a['state'])

            f.write("# summary published: %s\n" % a['last_answer'].get('__summary'))
            f.write("# user: %s\n" % a['user'])
            f.write("# assignment url: %s/%s\n" % (ASSIGNMENT_URL, a['iid']))
            f.write("# activity url: %s/%s\n" % (ACTIVITY_URL, a['name']))
            f.write("# submission timestamp: %s\n" % a['last_answer']['__timestamp'])
            f.write("# submission ip: %s\n" % a['last_answer']['__ip'])
            f.write("# revision number: %s\n" % a['revision_number'])


def main(args):

    # get rid of command from arguments
    tst.pop_argument(args)
    
    # try read tstjson
    tstjson = tst.read_tstjson() or {}
    if tstjson:
        _assert(tstjson.get('kind') == 'challenge', "tst: download works only for challenges")
        group = tstjson.get('group', config.get('group'))
        challenge = tstjson.get('name')
    else:
        group = config.get('group')
        challenge = tst.pop_argument(args)
        tstjson['name'] = challenge
        tstjson['kind'] = 'challenge'
        tstjson['group'] = group

    # check for group and challenge
    _assert(args == [], "tst: fatal: too many arguments")
    _assert(challenge, "tst: usage: tst download <challenge id>")
    _assert(group, "tst: no group was identified")

    # download summary
    server = tst.Server()
    url = '/api/group/%s/challenge/%s/download' % (group, challenge)
    tst.cprint(tst.RESET, 'Downloading files... (%s, %s)' % (tst.LGREEN + group + tst.RESET, tst.LGREEN + challenge + tst.RESET))
    data = server.get(url, exit_on_fail=True).json()

    # save data
    print('Saving assignments')
    save_assignments(data['assignments'])

    print('Saving activities')
    save_activities(data['activities'])

    print('Saving report file')
    save_report(data)

    # save .tst/tst.json
    tst.save_tstjson(tstjson)

    tst.cprint(tst.LCYAN, 'Done.')

# main
if __name__ == "__main__":

    if sys.argv[-1] == '--one-line-help':
        print("download assignments")
        sys.exit()

    config = tst.Config()
    if 'user' not in config:
        tst.cprint(tst.LRED, "No user logged in.")
        print("---")
        print("Use `tst login <email>` to log in to the server")
        sys.exit(1)

    main(sys.argv)
