#!/usr/bin/env python
# coding: utf-8
# TST release
# (C) 2016 Dalton Serey / UFCG

from __future__ import print_function
from __future__ import unicode_literals

import sys

import tstlib as tst
from tstlib import _assert
from tstlib import data2json
from tstlib import pop_argument, pop_option, pop_flag

def parse_cli(args):

    # release data
    r = {}

    # get rid of command name
    pop_argument(args)

    # identify key options/flags
    status = len(args) == 0
    user = pop_option(args, ['user', 'to'], short='t')
    disable = pop_flag(args, 'disable', short='d')
    enable = pop_flag(args, 'enable', short='e')

    if status:
        # status mode
        r['mode'] = "status"

    elif user:
        # pre-release mode
        r['mode'] = "pre-release"
        r['user'] = user
        r['unit'] = pop_option(args, 'unit', short='u') or "*"

    elif enable or disable:
        # post-release mode
        r['mode'] = "post-release"
        r['state'] = 'disabled' if disable else 'enabled'
        _assert(not enable or not disable, "Inconsistent arguments")

    else:
        # public release mode
        r['mode'] = "release"
        r['unit'] = pop_option(args, 'unit', short='u')
        r['group'] = pop_option(args, 'group', short='g')
        _assert(r['unit'], "Option --unit is mandatory in public mode")

    _assert(args == [], "Unrecognized or too many arguments")

    return r


def main():

    # read tst.json and activity
    tstjson = tst.read_tstjson(quit_on_fail=True)
    _assert(tstjson['kind'] == 'activity', "The release command doesn't apply here")

    # parse command line
    release = parse_cli(sys.argv)

    # check pre-conditions
    _assert(not release['mode'] == 'pre-release' or tstjson['state'] == 'draft', "Activity released: cannot pre-release to user")
    _assert(not release['mode'] == 'post-release' or tstjson['state'] in ('enabled', 'disabled'), "Activity is not enabled/disabled")

    # build the payload
    iid = tstjson['iid']

    server = tst.Server()
    url = '/api/activity/%d/release' % tstjson['iid']
    if release['mode'] == 'status':
        tst.cprint(tst.LCYAN, '# Release status')
        status = server.get(url, exit_on_fail=True).json()
        print("Version: %s" % (tst.LGREEN + status['version'] + tst.RESET))
        print("State: %s" % (tst.LGREEN + status['state'] + tst.RESET))
        print("Viewers:")
        for v in status['viewers']:
            tst.cprint("  " + tst.LGREEN, v)

    else:
        print(tst.data2json(release))
        status = server.post(url, payload=release, headers={'Content-type':'application/json'}, exit_on_fail=True).json()
        print("Released: %s" % (tst.LGREEN + str(status['released']) + tst.RESET))
        print("Version: %s" % (tst.LGREEN + status['version'] + tst.RESET))
        print("State: %s" % (tst.LGREEN + status['state'] + tst.RESET))
        if 'viewers' in status:
            print("Viewers:")
            for v in status['viewers']:
                tst.cprint("  " + tst.LGREEN, v)

        tstjson['state'] = status['state']
        tstjson['version'] = status['version']
        tst.save_tstjson(tstjson)


# main
if __name__ == "__main__":
    main()
