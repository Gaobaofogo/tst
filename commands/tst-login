#!/usr/bin/env python
# coding: utf-8
# TST login
# (C) 2012-2014 Dalton Serey / UFCG

from __future__ import print_function
from __future__ import unicode_literals

import sys
import os
import webbrowser
import json

import tstlib as tst
from tst.climenu import climenu

def main(code):
    config = tst.Config()
    repositories = [r['name'] for r in config['repositories']]
    assert repositories, "oops! no repositories configured"

    opcao = "1" if len(repositories) == 1 else climenu(repositories, try_curses=False)[0]
    #repository = config['repositories'][int(opcao[0])]
    #login_url = repository.get('login_url')
    if code is None:
        login_url = 'http://tst-online.appspot.com/activate'
        #login_url = config['repositories'][index]
        webbrowser.open('http://tst-online.appspot.com/activate')
        code = raw_input('Code: ').strip()

    print("Validating code '%s'..." % code)
    server = tst.Server()
    path = '/login/code/%s/token' % code
    headers = {}
    try:
        response = server.get(path, headers=headers)
    except tst.ConnectionFail as e:
        print("tst: connection to server failed", file=sys.stderr)
        sys.exit()

    data = json.loads(response.body)
    if data.get('error') == 404:
        print('Code is not valid')
        print('Run `tst login` (without code)')
        sys.exit(1)

    token = data['tst_token']
    user = data['email']

    config['access_token'] = token
    config['user'] = user

    # save to ~/.tst/curlrc
    with open(os.path.expanduser("~/.tst/curlrc"), "w") as curlrc:
        curlrc.write('-H "Authorization: Bearer %s"' % token)
        
    config.save()
    print("Token validated.")
    print("You are now logged in as: %s" % user)


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == '--one-line-help':
        print("log into TST Online Server")
        sys.exit()

    code = sys.argv[1] if len(sys.argv) > 1 else None
    main(code)
