#!/usr/bin/env python
# coding: utf-8
# TST-Online Command Line Login
# (C) 2012-2014 Dalton Serey / UFCG
#
# Login no tst-online via OAuth-Like Login.

from __future__ import print_function
from __future__ import unicode_literals

import sys
import os
import webbrowser

import tstlib as tst

def main(token):

    config = tst.Config()
    if not token:
        webbrowser.open(config['url'] + "/token/get")
        print("Copy and paste the token here:")
        token = raw_input().strip()

    if 'user' not in config:
        user = raw_input("User email: ")
    else:
        user = config.get('user')

    # request login authentication at google
    headers = {'Authorization': 'Bearer ' + token}
    path = '/token/validate/%s' % user

    print("Validating the token...")
    server = tst.Server()
    try:
        response = server.get(path, headers=headers)
    except tst.ConnectionFail as e:
        print("tst: connection to server failed", file=sys.stderr)
        sys.exit()

    validation_msg = response.body.splitlines()[0]
    if validation_msg != "Valid token.":
        print("ERRO: '%s'" % response.body)
        sys.exit()

    config['access_token'] = token
    config['user'] = user

    # save to ~/.tst/curlrc
    with open(os.path.expanduser("~/.tst/curlrc"), "a") as curlrc:
        curlrc.write('-H "Authorization: Bearer %s"' % token)
        
    config.save()
    print("Token validated.")
    print("You are now logged in as: %s" % user)


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == '--one-line-help':
        print("log into TST Server")
        sys.exit()

    token = sys.argv[1] if len(sys.argv) > 1 else None
    main(token)
