#!/usr/bin/env python
# coding: utf-8
# TST-Online Checkout
# (C) 2016 Dalton Serey / UFCG

from __future__ import print_function
from __future__ import unicode_literals

import json
import yaml
import os
import sys
import codecs
import md5
import difflib

import tstlib as tst
from tstlib import show

try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO

TEXT_FIELDS = ['name', 'label', 'type', 'text']

def help():
    print("usage: tst-commit [name]")
    sys.exit(1)


def activity_url(iid):
    activities_endpoint = "/api/activity"
    return "%s/%s" % (activities_endpoint, str(iid))


def bump_patch(version):
    major, minor, patch = map(int, version.split("."))
    patch += 1
    return "%d.%d.%d" % (major, minor, patch)


def bump_minor(version):
    major, minor, patch = map(int, version.split("."))
    minor += 1
    patch = 0
    return "%d.%d.%d" % (major, minor, patch)


def bump_major(version):
    major, minor, patch = map(int, version.split("."))
    major += 1
    minor = 0
    patch = 0
    return "%d.%d.%d" % (major, minor, patch)


def report(changes, name):
    if not changes:
        return ""

    text = StringIO()
    text.write("# Activity %s\n\n" % name)

    # add textual contents changes
    if any(e in changes.keys() for e in TEXT_FIELDS):
        text.write("## Textual fields changed\n\n")
        for f in TEXT_FIELDS:
            if f in changes.keys():
                text.write("  - %s\n" % f)
        text.write('\n')

    # add removed tests
    removed = [i for i in xrange(len(changes.get('tests', []))) if changes['tests'][i][0] == '-']
    if removed:
        text.write("## Tests removed\n\n")
        for i in removed:
            text.write('  - test #%d: %s\n' % (changes['tests'][i][2], changes['tests'][i][1]))
        text.write('\n')
        
    # add added tests
    added = [i for i in xrange(len(changes.get('tests', []))) if changes['tests'][i][0] == '+']
    if added:
        text.write("## Tests added\n\n")
        for i in added:
            text.write('  - test #%d: %s\n' % (changes['tests'][i][2], changes['tests'][i][1]))
        text.write('\n')
        
    # add files changed
    if 'files' in changes:
        text.write("## Files changed/added\n\n")
        for filename in changes['files']:
            text.write('- %s\n' % filename)
        text.write('\n')

    # add unknown files
    if 'unknown' in changes:
        text.write("## Unknown files\n\n")
        for fn in changes['unknown']:
            text.write('  - %s\n' % fn)
        text.write("\n  Use `tst add <file>` to add file to the activity.\n")
        text.write("  Or type `tst clean` to remove all unknown files.\n\n")

    text.write('---\n')
    return text.getvalue()


def bump_patch(version):
    major, minor, patch = map(int, version.split("."))
    patch += 1
    return "%d.%d.%d" % (major, minor, patch)


def make_patch(activity, tstjson, changes, bump_level):
    if not changes:
        return None

    # add patch to bump the version number
    bump_function = globals()['bump_' + bump_level]
    patches = [{
        'op': 'replace',
        'path': '/version',
        'value': bump_function(tstjson['version'])
    }]

    # add a patch for each textual field
    changed_paths = changes.get('changed_fields')
    if not changed_paths:
        # only removed files
        for fn in changes['removed_files']:
            patches.append({
                'op': 'remove',
                'path': '/files/' + fn
            })
        
        return patches

    textual_fields = [f for f in changed_paths if '\n' not in f]
    for field in ['name', 'type', 'label', 'text']:
        if field in textual_fields:
            patches.append({
                'op': 'replace',
                'path': '/' + field,
                'value': activity[field]
            })
        
    # add a patch for each file changed or created
    files_changed = [path.split("/")[1:3] for path in changed_paths if path.startswith('files')]
    for fn, change in files_changed:
        patches.append({
            'op': 'replace',
            'path': '/files/' + fn,
            'value': {
                'name': fn,
                'data': activity['files'][fn]['data'],
                'category': tstjson['files'][fn].get('category', 'secret')
            }
        })
        
    if 'tests' in changed_paths:
        hashed_tests = tst.hashify(activity['tests'])
        for op, test, index in changes['tests_diff']:
            if op == '+':
                patches.append({
                    'op': 'add',
                    'path': '/tests/%d' % index,
                    'value': activity['tests'][hashed_tests.index(test)]
                })
            elif op == '-':
                patches.append({
                    'op': 'remove',
                    'path': '/tests/%d' % index
                })

    return patches


def patch_tstjson(tstjson, activity, changes, server_version):
    
    # update version data
    tstjson['version'] = server_version['version']
    tstjson['version_token'] = server_version['version_token']
    tstjson['last_update_user'] = server_version['commit_author']
    tstjson['last_update_datetime'] = server_version['committed_at']
    
    # update textual contents data
    textual_fields = []
    for field in TEXT_FIELDS:
        if field in changes:
            if field == 'text':
                tstjson[field] = md5.md5(activity['text:contents']).hexdigest()
            else:
                tstjson[field] = activity[field]

    # update files data
    for filename in changes.get('files', []):
        if filename in changes['files']:
            tstjson['files'][filename] = activity['files'][filename]

    # update tests data
    for test in changes.get('tests', []):
        if testname in changes['tests']:
            tstjson['tests'][filename] = activity['tests'][filename]

    return tstjson


def _assert(condition, msg='assertion failed'):
    if not condition:
        tst.cprint(tst.LRED, msg, file=sys.stderr)
        sys.exit(1)


def sync_activity(response, tstjson):
    # check response was positive
    json_response = response.json()
    _assert(response.exit_status == 0, 'tst: fatal: curl command failed\n')
    _assert('error' not in json_response, 'tst: fatal: server reported error:\n' + str(json_response.get('messages', 'no server messages')))

    # post/patch worked: save using proper save function
    save = tst.get_save_function('activity')
    save(json_response, is_checkout=False)


def commit_activity(tstjson, args):

    # parse command line
    tst.pop_argument(args)
    major = tst.pop_flag(args, 'major', short='M')
    minor = tst.pop_flag(args, 'minor', short='m')
    patch = tst.pop_flag(args, 'patch', short='p')
    user_bump = 'major' if major else 'minor' if minor else 'patch' if patch else None

    # read activity
    activity, unknown = tst.read_activity(tstjson)

    # check whether activity is new
    server = tst.Server()
    if tstjson['state'] == 'new':
        # post new activity
        url = "/api/activity"
        response = server.post(url, payload=activity, exit_on_fail=True)
        sync_activity(response, tstjson)
        print("First version successfully saved to the server")
        print("%s" % response.json()['version'])
        sys.exit()

    # read local directory and identify changes
    changes = tst.activity_changes(activity, tstjson)
    if not changes:
        tst.cprint(tst.LCYAN, "Nothing to commit")
        sys.exit()

    # check for missed updates
    url = '/api/activity/%s/version' % tstjson['iid']
    last_version = server.get(url).json()
    missed_updates = False
    if last_version['version'] != tstjson['version'] or last_version['version_token'] != tstjson['version_token']:
        # missed updates
        print("This activity has been updated on the server.")
        print("Use:")
        print("    `tst checkout --overwrite` to update and overwrite local changes")
        print("    `tst checkout --merge` to update and merge local changes")
        sys.exit()


    # Check for missing files
    _assert(not 'missing_files' in changes, 'Acitivity cannot be commited due to missing files.\n' +\
                                               'Use `tst status` for more details.')
    url = activity_url(tstjson['iid'])

    # default bump level is patch
    bump_level = 'patch'
    if 'bump_required' in changes:
        _assert(user_bump is not None, 'Use --major, --minor or --patch')
        bump_level = user_bump
    else:
        bump_level = user_bump or 'patch'

    patches = make_patch(activity, tstjson, changes, bump_level)
    response = server.patch(url, patches)
    sync_activity(response, tstjson)
    print("Commmit finished.")
    print("%s" % response.json()['version'])


def commit_event(tstjson, args):
    print("commit event...")
    print("tbd")


def commit_group(tstjson, args):
    print("commit group...")
    print("tbd")


def commit_assignment(tstjson, args):

    # parse command line arguments
    tst.pop_argument(args)
    user_filename = tst.pop_argument(args)

    # read assignemnt
    assignment = tst.read_assignment(tstjson)

    # identify answer file
    files = tstjson['files']
    current_answer_file = next((fn for fn in files if files[fn]['category'] == 'answer'), None)
    filename = user_filename or current_answer_file
    if filename is None and len(assignment['unknown_files']) == 1:
        # take unique unknown file as answer, add to tstjson and notify user
        filename = assignment['unknown_files'].pop(0)
        tst.cprint(tst.LCYAN, "Assuming `%s` as answer file" % filename)
    
    _assert(filename, "No answer file was identified")

    if not os.path.exists(filename):
        tst.cprint(tst.LRED, "Answer file not found: '%s'" % filename)
        print("---")
        print("Use `tst commit <filename>` to change and commit the answer file")
        print("Or bring back the file and run `tst commit` again")
        sys.exit()

    # read current answer
    with codecs.open(filename, mode='r', encoding='utf-8') as f:
        contents = f.read()
    checksum = md5.md5(contents).hexdigest()
    if filename == current_answer_file and checksum == tstjson['last_commit']:
        tst.cprint(tst.LCYAN, 'No changes to commit')
        sys.exit()

    # send answer to server
    server = tst.Server()
    url = '/api/assignment/%s' % tstjson['iid']
    payload = [{
        "op": "add",
        "path": "/answers",
        "value": {
            "__code": contents,
            "__filename": filename,
            "__activity_revision": tstjson['activity_revision']
        }
    }]
    result = server.patch(url, payload=payload, exit_on_fail=True).json()
    if result['server_activity_revision'] != result['client_activity_revision']:
        pass

    # update tstjson contents
    tstjson.pop(current_answer_file, None)
    tstjson['files'][filename] = {
        'name': filename,
        'category': 'answer',
        'data': contents
    }
    tstjson['last_commit'] = checksum
    tst.save_tstjson(tstjson)
        
    tst.cprint(tst.LCYAN, "Assignment successfully saved")
    print("---")
    print("Use `tst test --server` to add answer to the acceptance tests queue")
        
    # notify user if there still are unkwnown files
    if assignment['unknown_files']:
        tst.cprint(tst.LCYAN, "Unknown files (not sent to the server)")
        for filename in assignment['unknown_files']:
            print("  %s" % filename)


def get_commit_function(kind):
    return globals()["commit_" + kind]


def main():

    # identify local object
    tstjson = tst.read_tstjson(quit_on_fail=True)
    kind = tstjson['kind']
    iid = tstjson['iid']

    # do commit
    commit = get_commit_function(kind)
    commit(tstjson, sys.argv)
    sys.exit()


# main
if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == '--one-line-help':
        print("save object to the server")
        sys.exit()

    config = tst.Config()
    main()
