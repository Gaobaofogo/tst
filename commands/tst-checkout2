#!/usr/bin/env python
# coding: utf-8
# TST-Online Checkout
# (C) 2016 Dalton Serey / UFCG

from __future__ import print_function
from __future__ import unicode_literals

import json
import os
import sys
import codecs
import md5

import tstlib as tst
from tstlib import data2json

def help():
    print("usage: tst-checkout [name]")
    sys.exit(1)


def mkdirs(dirname):
    try: 
        os.makedirs(dirname)
        return True
    except OSError:
        if not os.path.isdir(dirname):
            raise


def activity_url(iid):
    activities_endpoint = "http://tst-online.appspot.com/api/activity"
    return "%s/%s" % (activities_endpoint, str(iid))


def indent(text, level=1):
    lines = text.splitlines()
    text = "\n".join([level * "    " + "%s" % l for l in lines])
    return text


def save_yaml(yamlfile, data):

    with codecs.open(yamlfile, mode='w', encoding='utf-8') as y:

        # save one line string values
        for key, value in data.items():
            if key in ('tests', 'files'):
                continue
            if not isinstance(value, basestring):
                print('tst: fatal: value is not basestring')
                sys.exit(1)
            y.write("%s: %s\n" % (key, value))

        # save tests
        if 'tests' in data:
            y.write('tests:\n')
            for test in data['tests']:
                is_first = True
                for test_field, field_value in test.items():
                    prefix = '-   ' if is_first else '    '
                    if '\n' in field_value:
                        y.write(prefix + '%s: |+\n' % test_field)
                        y.write(indent(field_value, 2) + '\n')
                    else:
                        y.write(prefix + '%s: %s\n' % (test_field, field_value))
                    is_first = False

        if 'files' in data:
            y.write('files:\n')
            for file in data['files']:
                is_first = True
                for file_field, field_value in file.items():
                    prefix = '-   ' if is_first else '    '
                    if file_field == 'data': continue
                    if '\n' in field_value:
                        y.write(prefix + '%s: |+\n' % file_field)
                        y.write(indent(field_value, 2) + '\n')
                    else:
                        y.write(prefix + '%s: %s\n' % (file_field, field_value))
                    is_first = False


def save_activity(data):

    # save tst.json
    tstjson = {}
    tstjson['kind'] = 'activity'
    tstjson['create_datetime'] = data['create_datetime']
    tstjson['collaborators'] = data['collaborators']
    tstjson['last_update_user'] = data['last_update_user']
    tstjson['last_update_datetime'] = data['last_update_datetime']
    tstjson['type'] = data['type']
    tstjson['owner'] = data['owner']
    tstjson['state'] = data['state']
    tstjson['version'] = "%s.%s.%s" % (data['major'], data['minor'], data['patch'])
    tstjson['files'] = {f['name']: md5.md5(f['data'].encode('utf-8')).hexdigest() for f in data['files']}
    tst.save_tstjson(tstjson)

    # save markdown
    textfile = data['name'] + ".md" 
    with codecs.open(textfile, mode='w', encoding='utf-8') as f:
        f.write(data['text'])

    # save yaml
    tstyaml = {}
    tstyaml['name'] = data['name']
    tstyaml['label'] = data['label']
    tstyaml['tests'] = data['new_tests'][-1]
    tstyaml['files'] = data['files']
    tstyaml['text'] = data['name'] + '.md'
    save_yaml(data['name'] + '.yaml', tstyaml)

    # save files
    for file in data['files']:
        filename = file['name']
        with codecs.open(filename, mode='w', encoding='utf-8') as f:
            f.write(file['data'])

def main():
    TSTJSON = './tst.json'
    if os.path.exists(TSTJSON):
        if len(sys.argv) > 1:
            print("you can't checkout an object inside another")
            sys.exit(1)
        else:
            tstjson = tst.read_tstjson(quit_on_fail=True)
            kind = tstjson.get('kind', 'activity')
            name = tstjson['name']
    else:
        name = sys.argv[1]
        kind = 'assignment' if name.isdigit() else 'activity'
        if len(sys.argv) > 2:
            directory = sys.argv[2]
        else:
            directory = name

    # request object data
    server = tst.Server()
    url = activity_url(name)
    response = server.get(url)
    try:
        object_json = response.json()
    except:
        print(response.stdout)
        print(response.stderr)
        sys.exit(1)

    # change to activity directory
    if not os.path.exists(directory):
        mkdirs(directory)
    os.chdir(directory)

    # save object to local filesystem
    save = globals()["save_" + kind]
    save(object_json)


    sys.exit()

    # deal with arguments
    name = sys.argv[1] if len(sys.argv) > 1 else None
    dirname = sys.argv[2] if len(sys.argv) > 2 else None

    if os.path.exists(TSTJSON):
        print("tst: sorry, we still cannot checkout from a tst directory")
        help()

    if name is None:
        print("tst: what do you want to checkout?")
        help()

    # get the raw data
    jsonfile = sys.argv[1] + ".json"
    with codecs.open(jsonfile, mode='r', encoding='utf-8') as f:
        data = json.loads(f.read())

    # create directory
    if name is not None:
        dirname = dirname or data['mode']
        if os.path.exists(dirname):
            print("tst: fatal: directory '%s' already exists" % dirname)
            print("Run checkout within the directory to update")
            sys.exit(1)
        mkdirs(dirname)
            
    # enter the directory and populate it
    os.chdir(dirname)
    assignments = data['summary']['assignments']
    for a in assignments:
        activity_dir = '%s.%s' % (a['unit'], a['activity'])
        mkdirs(activity_dir)
        os.chdir(activity_dir)
        filename = '%s.py' % a['user'].split('@')[0].replace('.', '_')
        with codecs.open(filename, mode='w', encoding='utf-8') as f:
            f.write("ok")
        os.chdir('..')


# main
if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == '--one-line-help':
        print("update tst objects")
        sys.exit()

    config = tst.read_config(exit=True)
    main()
