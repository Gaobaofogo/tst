#!/usr/bin/env python
# coding: utf-8
# TST-Online Checkout
# (C) 2016 Dalton Serey / UFCG

from __future__ import print_function
from __future__ import unicode_literals

import json
import yaml
import os
import sys
import codecs
import md5
import difflib

import tstlib as tst
from tstlib import show

try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO

TEXT_FIELDS = ['name', 'label', 'type', 'text']

def help():
    print("usage: tst-commit [name]")
    sys.exit(1)


def activity_url(iid):
    activities_endpoint = config['url'] + "/api/activity"
    return "%s/%s" % (activities_endpoint, str(iid))


def bump_patch(version):
    major, minor, patch = map(int, version.split("."))
    patch += 1
    return "%d.%d.%d" % (major, minor, patch)


def bump_minor(version):
    major, minor, patch = map(int, version.split("."))
    minor += 1
    patch = 0
    return "%d.%d.%d" % (major, minor, patch)


def bump_major(version):
    major, minor, patch = map(int, version.split("."))
    major += 1
    minor = 0
    patch = 0
    return "%d.%d.%d" % (major, minor, patch)


def report(changes, name):
    if not changes:
        return ""

    text = StringIO()
    text.write("# Activity %s\n\n" % name)

    # add textual contents changes
    if any(e in changes.keys() for e in TEXT_FIELDS):
        text.write("## Textual fields changed\n\n")
        for f in TEXT_FIELDS:
            if f in changes.keys():
                text.write("  - %s\n" % f)
        text.write('\n')

    # add removed tests
    removed = [i for i in xrange(len(changes.get('tests', []))) if changes['tests'][i][0] == '-']
    if removed:
        text.write("## Tests removed\n\n")
        for i in removed:
            text.write('  - test #%d: %s\n' % (changes['tests'][i][2], changes['tests'][i][1]))
        text.write('\n')
        
    # add added tests
    added = [i for i in xrange(len(changes.get('tests', []))) if changes['tests'][i][0] == '+']
    if added:
        text.write("## Tests added\n\n")
        for i in added:
            text.write('  - test #%d: %s\n' % (changes['tests'][i][2], changes['tests'][i][1]))
        text.write('\n')
        
    # add files changed
    if 'files' in changes:
        text.write("## Files changed/added\n\n")
        for filename in changes['files']:
            text.write('- %s\n' % filename)
        text.write('\n')

    # add unknown files
    if 'unknown' in changes:
        text.write("## Unknown files\n\n")
        for fn in changes['unknown']:
            text.write('  - %s\n' % fn)
        text.write("\n  Use `tst add <file>` to add file to the activity.\n")
        text.write("  Or type `tst clean` to remove all unknown files.\n\n")

    text.write('---\n')
    return text.getvalue()


def bump_patch(version):
    major, minor, patch = map(int, version.split("."))
    patch += 1
    return "%d.%d.%d" % (major, minor, patch)


def make_patch(changes, activity, tstjson):
    if not changes:
        return None

    # add bump patch
    patches = [{
        'op': 'replace',
        'path': '/version',
        'value': bump_patch(tstjson['version'])
    }]

    # add a patch for each textual field
    changed_paths = changes['changed_fields']
    textual_fields = [f for f in changed_paths if '\n' not in f]
    for field in ['name', 'type', 'label', 'text']:
        if field in textual_fields:
            patches.append({
                'op': 'replace',
                'path': '/' + field,
                'value': activity[field]
            })
        
    # add a patch for each file changed or created
    files_changed = [path.split("/")[1:3] for path in changed_paths if path.startswith('files')]
    for fn, change in files_changed:
        patches.append({
            'op': 'replace',
            'path': '/files/' + fn,
            'value': {
                'name': fn,
                'data': activity['files'][fn]['data'],
                'category': tstjson['files'][fn]['category']
            }
        })
        
    if 'tests' in changed_paths:
        hashed_tests = tst.hashify(activity['tests'])
        for op, test, index in changes['tests_diff']:
            if op == '+':
                patches.append({
                    'op': 'add',
                    'path': '/tests/%d' % index,
                    'value': activity['tests'][hashed_tests.index(test)]
                })
            elif op == '-':
                patches.append({
                    'op': 'remove',
                    'path': '/tests/%d' % index
                })

    return patches


def patch_tstjson(tstjson, activity, changes, server_version):
    
    # update version data
    tstjson['version'] = server_version['version']
    tstjson['version_token'] = server_version['version_token']
    tstjson['last_update_user'] = server_version['commit_author']
    tstjson['last_update_datetime'] = server_version['committed_at']
    
    # update textual contents data
    textual_fields = []
    for field in TEXT_FIELDS:
        if field in changes:
            if field == 'text':
                tstjson[field] = md5.md5(activity['text:contents']).hexdigest()
            else:
                tstjson[field] = activity[field]

    # update files data
    for filename in changes.get('files', []):
        if filename in changes['files']:
            tstjson['files'][filename] = activity['files'][filename]

    # update tests data
    for test in changes.get('tests', []):
        if testname in changes['tests']:
            tstjson['tests'][filename] = activity['tests'][filename]

    return tstjson


def _assert(condition, code=1, msg='assertion failed'):
    if not condition:
        print(msg, file=sys.stderr)
        sys.exit(code)


def assert_no_missed_updates(tstjson):
    print('checking for missed updates...')
    url = activity_url(tstjson['iid']) + "/version"
    server_version = server.get(url).json()

    if server_version['version_token'] != tstjson['version_token']:
        print("Your copy is stale.")
        print("  - local version: %s" % tstjson['version'])
        print("  - server version: %s" % server_version['version'])
        print("Use `tst checkout` to update.")
        sys.exit(1)
    else:
        print("Your copy is up-to-date with the server.")
            

def main():

    # read tst.json
    tstjson = tst.read_tstjson(quit_on_fail=True)

    # read activity and unknown files
    activity, unknown = tst.read_activity(tstjson)

    # perform request to server
    if tstjson['state'] == 'new':
        # POST for new activity
        url = config['url'] + "/api/activity"
        payload = activity
        response = server.post(url, activity)

    else:
        # PATCH for existing activity
        changes = tst.activity_changes(activity, tstjson)
        _assert(changes, 1, 'Acitivity was not changed.\n' + 'Nothing to commit.\n')
        _assert(not 'missing_files' in changes, 1, 'Acitivity cannot be commited due to missing files.\n' +\
                                                   'Use `tst status` for more details.')
        assert_no_missed_updates(tstjson)
        url = activity_url(tstjson['iid'])
        payload = make_patch(changes, activity, tstjson)
        response = server.patch(url, payload)

    # collect response and process possible errors
    _assert(response.exit_status == 0, 1, 'tst: fatal: curl command failed\n')
    json_response = response.json()
    _assert('error' not in json_response, 1, 'tst: fatal: server reported error:\n' + str(json_response.get('messages', 'no server messages')))

    # post/patch worked: save using proper save function
    save = tst.get_save_function('activity')
    save(json_response, tstjson.get('text_in_file'), is_checkout=False)

    print("Commmit finished.")
    print("%s" % json_response['version'])


# main
if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == '--one-line-help':
        print("save local activity to the repository")
        sys.exit()

    if len(sys.argv) > 1 and sys.argv[-1] == '-D':
        tst.DEBUG = True
        sys.argv.pop()

    config = tst.read_config(exit=True)
    server = tst.Server()
    main()
