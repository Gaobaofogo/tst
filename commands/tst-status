#!/usr/bin/env python
# coding: utf-8
# TST-Online Checkout
# (C) 2016 Dalton Serey / UFCG

from __future__ import print_function
from __future__ import unicode_literals

import json
import yaml
import os
import sys
import codecs
import md5
import difflib

import tstlib as tst
from tstlib import show

try:
    from cStringIO import StringIO
except:
    from StringIO import StringIO


def help():
    print("usage: tst-commit [name]")
    sys.exit(1)


def activity_url(iid):
    activities_endpoint = config['url'] + "/api/activity"
    return "%s/%s" % (activities_endpoint, str(iid))


def bump_patch(version):
    major, minor, patch = map(int, version.split("."))
    patch += 1
    return "%d.%d.%d" % (major, minor, patch)


def bump_minor(version):
    major, minor, patch = map(int, version.split("."))
    minor += 1
    patch = 0
    return "%d.%d.%d" % (major, minor, patch)


def bump_major(version):
    major, minor, patch = map(int, version.split("."))
    major += 1
    minor = 0
    patch = 0
    return "%d.%d.%d" % (major, minor, patch)


def report(changes, unknown_files, activity):

    # identify changed fields
    changed_fields = changes.get('changed_fields',[])

    # prepare text and header
    text = StringIO()

    # textual contents changes
    # TODO: rewrite conditional below
    if any('/' not in f for f in changed_fields if f != 'tests'):
        text.write("# Properties changed\n\n")
        for f in changed_fields:
            if not '/' in f and f != 'tests':
                text.write("    %s\n" % f)
        text.write('\n')

    # tests changed
    tests_diff = changes.get('tests_diff', [])
    if tests_diff:
        text.write("# Tests changed\n\n")
        for i in xrange(len(tests_diff)):
           text.write('    %s #%s: %s\n' % (tests_diff[i][0], tests_diff[i][2], tests_diff[i][1]) )
        text.write('\n')
        
    # files changed
    files_changed = [f.split("/")[1:3] for f in changed_fields if f.startswith('files')]
    if files_changed:
        text.write("# Files changed\n\n")
        for fn, field in files_changed:
            text.write('    %s (%s)\n' % (fn, field))
        text.write('\n')

    # unknown files
    if unknown_files:
        text.write("# Unknown files\n\n")
        for fn in unknown_files:
            text.write('    %s\n' % fn)
        text.write("\n  Use `tst add <file>` to add file to the activity.\n")
        text.write("  Or use `tst clean` to remove all unknown files.\n\n")

    # missing files
    if 'missing_files' in changes:
        text.write("# Missing files\n\n")
        for fn in changes['missing_files']:
            text.write('    %s\n' % fn)
        text.write("\n  Use `tst checkout <file>` to recover last version of a file.\n")
        text.write("  Or use `tst rm <file>` to remove a file from the activity.\n\n")

    return text.getvalue()


def main():

    # read tst.json
    tstjson = tst.read_tstjson(quit_on_fail=True)

    # check whether activity is new
    if tstjson['state'] == 'new':
        print("This activity is new. It is not saved to the server.")
        print("Use `tst commit` to save it.")
        sys.exit()

    # read activity and unknown files
    activity, unknown = tst.read_activity(tstjson)

    # identify modifications 
    changes = tst.activity_changes(activity, tstjson)

    print(report(changes, unknown, activity), end='')

    if changes:
        print('---')
        print('Use `tst checkout --overwrite` to discard all changes.')
        if 'missing_files' in changes:
            print('This activity cannot be committed due to missing files.')
        else:
            print('Use `tst commit` to save changes to the repository.')
    else:
        print('Activity is up-to-date with the server.')



# main
if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == '--one-line-help':
        print("show the status of the current activity")
        sys.exit()

    check_server = False
    if len(sys.argv) > 1 and sys.argv[1] == '--check-server':
        check_server = True

    if len(sys.argv) > 1 and sys.argv[-1] == '-D':
        tst.DEBUG = True
        sys.argv.pop()

    config = tst.read_config(exit=True)
    main()
