#!/usr/bin/env python
# coding: utf-8
# (c) 2011-2014 Dalton Serey, UFCG
#
# TST Commander. Invokes TST commands. It supports both internal
# and external commands. Internal commands are functions within
# this script named 'tst_*' and external commands are scripts
# named 'tst-*.py' contained in the ~/.tst/commands directory.
#
# To invoke a command, use the general syntax:
#
#       $ tst <command-name> [<arg> [<arg> ...]]
#
# If no recognized <command-name> is supplied, the
# DEFAULT_COMMAND will be invoked.

from __future__ import print_function
from __future__ import unicode_literals
import sys
import os

from subprocess import Popen, PIPE, check_call, CalledProcessError

# TST INTERNAL COMMANDS
DEFAULT_COMMAND = 'test'
EXTERNALS = ["update", "login", "checkout", "test", "commit", "config"]
HIDDEN = ['checkout2', 'commit2', 'status']
INTERNALS = ["help", "version"]

def tst_help(args):
    """short description of commands"""
    print("usage: tst [<command>] [<args>]\n")
    print("Available commands:\n")
    for cmd in INTERNALS:
        print("  %-12s%s" % (cmd, globals()['tst_' + cmd].__doc__))
    for cmd in EXTERNALS:
        print("  %-12s%s" % (cmd, get_one_line_help(cmd)))
 
    custom = custom_commands()
    if custom:
        print("\nCustom commands:")
        for cmd in custom_commands():
            print("  %-12s%s" % (cmd, get_one_line_help(cmd)))


def tst_version(args):
    """print version of currently installed tst"""
    try:
        release_file = os.path.expanduser("~/.tst/release.json")
        release = open(release_file).read().split('"')[3]
        msg = "tst version %s" % release
    except:
        msg = "your tst installation is either corrupted or outdated"

    print(msg)


def get_one_line_help(command):

    script = os.path.expanduser("~/.tst/commands/tst-%s" % command)
    try:
        process = Popen([script, "--one-line-help"], stdout=PIPE, stderr=PIPE)
    except:
        return "<no help available>"

    try:
        stdout, stderr = process.communicate()
    except: # something went wrong
        return "<no help available>"

    # collect report from stderr or stdout
    return stdout.strip().splitlines()[0]


def run_command_script(command, args):
    script_name = os.path.expanduser("~/.tst/commands/tst-%s" % command)
    args.insert(0, script_name)
    try:
        check_call(args)
    except CalledProcessError:
        pass
    except OSError:
        print("tst: couldn't run command '%s'" % command, file=sys.stderr)


def custom_commands():
    commands = os.environ.get("TST_CUSTOM_COMMANDS")
    return [] if commands is None else commands.split(":")


def identify_and_run_command(args):

    if args and args[0] in INTERNALS:
        command_name = args.pop(0) # discard command name
        run_internal_command = globals()["tst_" + command_name]
        run_internal_command(args)

    elif args and (args[0] in EXTERNALS or args[0] in custom_commands() or args[0] in HIDDEN):
        command_name = args.pop(0)
        run_command_script(command_name, args)

    else: # neither internal, nor external command!?
        command_name = DEFAULT_COMMAND
        run_command_script(command_name, args)


if __name__ == "__main__":
    # make a safe and mutable copy of the arguments list
    args = sys.argv[:]
    args.pop(0) # discard commander name (tst)
    identify_and_run_command(args)
