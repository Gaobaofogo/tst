#!/usr/bin/env python
# coding: utf-8
# (c) 2011-2014 Dalton Serey, UFCG
#
# TST Commander. Invokes TST commands. It supports both internal
# and external commands. Internal commands are functions within
# this script named 'tst_*' and external commands are scripts
# named 'tst-*.py'. Custom commands are any executables named
# 'tst-*.py' located anywhere in the system PATH.
#
# To invoke a command, use the general syntax:
#
#       $ tst <command-name> [<arg> [<arg> ...]]
#
# If no recognized <command-name> is supplied, the
# DEFAULT_COMMAND will be invoked.

from __future__ import print_function
from __future__ import unicode_literals
import sys
import os

from subprocess import Popen, PIPE, check_call, CalledProcessError

import tstlib as tst

# TST INTERNAL COMMANDS
DEFAULT_COMMAND = 'test'
INTERNALS = ["help", "version", "share", "file", "ls", "remove"]
EXTERNALS = ["update", "login", "checkout", "gentests", "check", "test", "commit", "config", "status", "new", "release", "delete", "list", "download"]
HELP = {
    "help": "list commands and short description",
    "version": "print version of tst",
    "share": "list, add or remove collaborators",
    "file": "add, remove or tag activity files",
    "ls": "list activity files",
    "update": "update tst",
    "login": "log into TST Server",
    "checkout": "download most recent version of activity/assignment",
    "test": "run tests",
    "commit": "save activity or assignment to server",
    "config": "configure tst",
    "status": "show status of current directory",
    "new": "create activity",
    "release": "release activity",
    "delete": "delete activity",
    "list": "list all activities",
    "gentests": "generate tests",
    "check": "search forbidden patterns",
    "download": "download answers",
}

def tst_help(args):
    """short description of commands"""
    print("usage: tst [<command>] [<args>]\n")
    print("Available commands:\n")
    for cmd in INTERNALS:
        print("  %-12s%s" % (cmd, globals()['tst_' + cmd].__doc__))
    for cmd in EXTERNALS:
        print("  %-12s%s" % (cmd, HELP[cmd]))
 

def tst_version(args):
    """print version of currently installed tst"""
    import pkg_resources
    try:
        version = pkg_resources.get_distribution("tst").version
        msg = "tst version %s" % version
    except:
        msg = "your tst installation is either corrupted or outdated"

    print(msg)


def tst_share(args):
    """list, add or remove collaborators"""

    def help():
        print("Use `tst share add <email>` to add a collaborator or")
        print("    `tst share remove <email>` to remove one")

    # wrong number of arguments
    if len(args) == 1:
        help()
        return

    tstjson = tst.read_tstjson(quit_on_fail=True)
    if len(args) == 0:
        # list all collaborators
        collaborators = tstjson['collaborators']
        users = collaborators[:]
        if tstjson['owner'] not in collaborators:
            users.append(tstjson['owner'])
        if users:
            print("# Shared with")
            users.sort()
            for c in users:
                if c != tstjson['owner']:
                    print("  - " + c)
                else:
                    print("  - " + tstjson['owner'] + " (owner)")
            print("---")
            help()
        sys.exit()
        
    # add collaborators
    action = args[0]
    if action != 'add':
        print("tst: fatal: unknown (or non implemented yet) share action")
        sys.exit(1)

    config = tst.Config()
    domain = config.get('domain', '')
    usernames = []
    for i in xrange(1, len(args)):
        un = args[i] if '@' in args[i] else args[i] + '@' + domain
        if un in tstjson['collaborators'] or un == tstjson['owner']:
            print("You cannot add a collaborator twice.")
            sys.exit(1)
        usernames.append(un)

    server = tst.Server()
    activity = tstjson['iid']
    url = '/api/activity/%s/collaborators' % activity
    response = server.post(url, payload=usernames)
    data = response.json()
    if response.status_code == 400:
        if 'unknown_users' in data:
            print("Some users were reported as unknown by the server")
            for u in response.json()['unknown_users']:
                print("  - %s" % u)
        elif 'ignored' in data:
            print("No user was added")
            print("Some users are already collaborators of this activity.")
        else:
            print("No user was added")
            print("No details were reported by the server.")
        sys.exit()

    elif response.status_code == 201:
        tstjson['collaborators'].extend(data['added'])
        tst.save_tstjson(tstjson)
        print("Sharing successful.")
        sys.exit()

    else:
        print("Something went wrong.")
        print("Does this activity really exist in the server?")
        if config['debug']:
            print(response.stderr)
            print(response.stdout)
        # TODO: add a tst.log method to save debug info
        sys.exit(1)


def tst_ls(args):
    """list files in activity"""
    tstjson = tst.read_tstjson()
    files = tstjson.setdefault('files', {})
    for fn in sorted(files.keys()):
        visibility = files[fn].get('category', 'private')
        print(fn, ("(%s)" % visibility if visibility == 'public' else ''))


def tst_remove(args):
    """remove files from activity"""
    tstjson = tst.read_tstjson()
    files = tstjson.setdefault('files', {})
    if any(f not in files for f in args):
        print("Some of the files don't exist.")
        print("Operation aborted.")
        sys.exit(1)

    removed = {}
    for f in args:
        removed[f] = files.pop(f)

    tst.save_tstjson(tstjson)
    for f in removed:
        print('removed: %s %s' % (removed[f].get('category', 'private'), f))


def tst_file(args):
    """add files to activity"""
    tstjson = tst.read_tstjson()
    visibility = args.pop(0) if args[0] in ('public', 'private') else None
    files = tstjson.setdefault('files', {})
    if any(f in files for f in args):
        print("Some files already exist.")
        print("Operation aborted.")
        sys.exit(1)

    added = []
    for f in args:
        if f in added:
            continue
        added.append(f)
        filedict = files.setdefault(f, {})
        if visibility:
            filedict['category'] = visibility

    tst.save_tstjson(tstjson)
    for f in added:
        print('added: %s %s' % (files[f].get('category', 'private'), f))


def tst_remove(args):
    """remove files from activity"""
    tstjson = tst.read_tstjson()
    for f in args:
        if tstjson['files'].pop(f, None) is None:
            print("File `%s` not found in activity" % f)
            print("Operation aborted.")
            sys.exit(1)

    tst.save_tstjson(tstjson)
    print('Files successfully removed.')


def get_one_line_help(command):

    script = os.path.expanduser("~/.tst/commands/tst-%s" % command)
    try:
        process = Popen([script, "--one-line-help"], stdout=PIPE, stderr=PIPE)
    except:
        return "<no help available>"

    try:
        stdout, stderr = process.communicate()
    except: # something went wrong
        return "<no help available>"

    # collect report from stderr or stdout
    return stdout.strip().splitlines()[0]


def run_external_command(command, args):
    script_name = os.path.expanduser("tst-%s" % command)
    args.insert(0, script_name)
    try:
        check_call(args)
    except CalledProcessError:
        pass
    except OSError:
        print("tst: couldn't run command '%s'" % command, file=sys.stderr)


def is_internal(fn):
    return fn.startswith('tst_') and fn.endswith('.py')


def is_external(fn):
    return fn.startswith('tst-')


def identify_and_run_command(args):
    from distutils.spawn import find_executable
    if args and args[0] in INTERNALS:
        command_name = args.pop(0) # discard command name
        run_internal_command = globals()["tst_" + command_name]
        run_internal_command(args)

    elif args and (args[0] in EXTERNALS):
        command_name = args.pop(0)
        run_external_command(command_name, args)

    elif args and find_executable('tst-%s' % args[0]):
        command_name = args.pop(0)
        run_external_command(command_name, args)
            
    else: # neither internal, nor external command!?
        command_name = DEFAULT_COMMAND
        run_external_command(command_name, args)


if __name__ == "__main__":
    # make a safe and mutable copy of the arguments list
    args = sys.argv[:]
    args.pop(0) # discard commander name (tst)
    identify_and_run_command(args)
